Index: src/plugins/contrib/headerfixup/bindings.h
===================================================================
--- src/plugins/contrib/headerfixup/bindings.h	(revision 7857)
+++ src/plugins/contrib/headerfixup/bindings.h	(working copy)
@@ -49,6 +49,10 @@
   void SetDefaultsCodeBlocks();
   /** \brief Initializing wxWidgets bindings with default values */
   void SetDefaultsWxWidgets();
+  /** \brief Initializing STL bindings with default values */
+  void SetDefaultsSTL();
+  /** \brief Initializing C_Library bindings with default values */
+  void SetDefaultsCLibrary();
 
   WX_DECLARE_STRING_HASH_MAP(wxArrayString,MappingsT);
   WX_DECLARE_STRING_HASH_MAP(MappingsT,GroupsT);
Index: src/plugins/contrib/headerfixup/defaults.cpp
===================================================================
--- src/plugins/contrib/headerfixup/defaults.cpp	(revision 7857)
+++ src/plugins/contrib/headerfixup/defaults.cpp	(working copy)
@@ -15,6 +15,8 @@
 {
   SetDefaultsCodeBlocks();
   SetDefaultsWxWidgets();
+  SetDefaultsSTL();
+  SetDefaultsCLibrary();
 }
 
 void Bindings::SetDefaultsCodeBlocks()
@@ -1822,3 +1824,436 @@
   AddBinding(_T("wxWidgets_2_8_8"),_T("wxZlibInputStream"),                  _T("wx/zstream.h"));
   AddBinding(_T("wxWidgets_2_8_8"),_T("wxZlibOutputStream"),                 _T("wx/zstream.h"));
 }// SetDefaultsWxWidgets
+
+void Bindings::SetDefaultsSTL()
+{
+  AddBinding(_T("STL"),_T("adjacent_find"),                      _T("algorithm"));
+  AddBinding(_T("STL"),_T("binary_search"),                      _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_copy"),                       _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_copy_backward"),              _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_fill_n"),                     _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_generate_n"),                 _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_merge"),                      _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_remove_copy"),                _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_remove_copy_if"),             _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_replace_copy"),               _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_replace_copy_if"),            _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_reverse_copy"),               _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_rotate_copy"),                _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_set_difference"),             _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_set_intersection"),           _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_set_symmetric_difference"),   _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_set_union"),                  _T("algorithm"));
+  AddBinding(_T("STL"),_T("checked_unique_copy"),                _T("algorithm"));
+  AddBinding(_T("STL"),_T("copy"),                               _T("algorithm"));
+  AddBinding(_T("STL"),_T("copy_backward"),                      _T("algorithm"));
+  AddBinding(_T("STL"),_T("count"),                              _T("algorithm"));
+  AddBinding(_T("STL"),_T("count_if"),                           _T("algorithm"));
+  AddBinding(_T("STL"),_T("equal"),                              _T("algorithm"));
+  AddBinding(_T("STL"),_T("equal_range"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("fill"),                               _T("algorithm"));
+  AddBinding(_T("STL"),_T("fill_n"),                             _T("algorithm"));
+  AddBinding(_T("STL"),_T("find"),                               _T("algorithm"));
+  AddBinding(_T("STL"),_T("find_end"),                           _T("algorithm"));
+  AddBinding(_T("STL"),_T("find_first_of"),                      _T("algorithm"));
+  AddBinding(_T("STL"),_T("find_if"),                            _T("algorithm"));
+  AddBinding(_T("STL"),_T("for_each"),                           _T("algorithm"));
+  AddBinding(_T("STL"),_T("generate"),                           _T("algorithm"));
+  AddBinding(_T("STL"),_T("generate_n"),                         _T("algorithm"));
+  AddBinding(_T("STL"),_T("includes"),                           _T("algorithm"));
+  AddBinding(_T("STL"),_T("inplace_merge"),                      _T("algorithm"));
+  AddBinding(_T("STL"),_T("iter_swap"),                          _T("algorithm"));
+  AddBinding(_T("STL"),_T("lexicographical_compare"),            _T("algorithm"));
+  AddBinding(_T("STL"),_T("lower_bound"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("make_heap"),                          _T("algorithm"));
+  AddBinding(_T("STL"),_T("max"),                                _T("algorithm"));
+  AddBinding(_T("STL"),_T("max_element"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("merge"),                              _T("algorithm"));
+  AddBinding(_T("STL"),_T("min"),                                _T("algorithm"));
+  AddBinding(_T("STL"),_T("min_element"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("mismatch"),                           _T("algorithm"));
+  AddBinding(_T("STL"),_T("next_permutation"),                   _T("algorithm"));
+  AddBinding(_T("STL"),_T("nth_element"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("partial_sort"),                       _T("algorithm"));
+  AddBinding(_T("STL"),_T("partial_sort_copy"),                  _T("algorithm"));
+  AddBinding(_T("STL"),_T("partition"),                          _T("algorithm"));
+  AddBinding(_T("STL"),_T("pop_heap"),                           _T("algorithm"));
+  AddBinding(_T("STL"),_T("prev_permutation"),                   _T("algorithm"));
+  AddBinding(_T("STL"),_T("push_heap"),                          _T("algorithm"));
+  AddBinding(_T("STL"),_T("random_shuffle"),                     _T("algorithm"));
+  AddBinding(_T("STL"),_T("remove"),                             _T("algorithm"));
+  AddBinding(_T("STL"),_T("remove_copy"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("remove_copy_if"),                     _T("algorithm"));
+  AddBinding(_T("STL"),_T("remove_if"),                          _T("algorithm"));
+  AddBinding(_T("STL"),_T("replace"),                            _T("algorithm"));
+  AddBinding(_T("STL"),_T("replace_copy"),                       _T("algorithm"));
+  AddBinding(_T("STL"),_T("replace_copy_if"),                    _T("algorithm"));
+  AddBinding(_T("STL"),_T("replace_if"),                         _T("algorithm"));
+  AddBinding(_T("STL"),_T("reverse"),                            _T("algorithm"));
+  AddBinding(_T("STL"),_T("reverse_copy"),                       _T("algorithm"));
+  AddBinding(_T("STL"),_T("rotate"),                             _T("algorithm"));
+  AddBinding(_T("STL"),_T("rotate_copy"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("search"),                             _T("algorithm"));
+  AddBinding(_T("STL"),_T("search_n"),                           _T("algorithm"));
+  AddBinding(_T("STL"),_T("set_difference"),                     _T("algorithm"));
+  AddBinding(_T("STL"),_T("set_intersection"),                   _T("algorithm"));
+  AddBinding(_T("STL"),_T("set_symmetric_difference"),           _T("algorithm"));
+  AddBinding(_T("STL"),_T("set_union"),                          _T("algorithm"));
+  AddBinding(_T("STL"),_T("sort"),                               _T("algorithm"));
+  AddBinding(_T("STL"),_T("sort_heap"),                          _T("algorithm"));
+  AddBinding(_T("STL"),_T("stable_partition"),                   _T("algorithm"));
+  AddBinding(_T("STL"),_T("stable_sort"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("swap"),                               _T("algorithm"));
+  AddBinding(_T("STL"),_T("swap_ranges"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("transform"),                          _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_copy"),                     _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_copy_backward"),            _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_fill_n"),                   _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_generate_n"),               _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_merge"),                    _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_remove_copy"),              _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_remove_copy_if"),           _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_replace_copy"),             _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_replace_copy_if"),          _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_reverse_copy"),             _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_rotate_copy"),              _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_set_difference"),           _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_set_intersection"),         _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_set_symmetric_difference"), _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_set_union"),                _T("algorithm"));
+  AddBinding(_T("STL"),_T("unchecked_unique_copy"),              _T("algorithm"));
+  AddBinding(_T("STL"),_T("unique"),                             _T("algorithm"));
+  AddBinding(_T("STL"),_T("unique_copy"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("upper_bound"),                        _T("algorithm"));
+  AddBinding(_T("STL"),_T("bitset"),                             _T("bitset"));
+  AddBinding(_T("STL"),_T("arg"),                                _T("complex"));
+  AddBinding(_T("STL"),_T("complex"),                            _T("complex"));
+  AddBinding(_T("STL"),_T("conj"),                               _T("complex"));
+  AddBinding(_T("STL"),_T("imag"),                               _T("complex"));
+  AddBinding(_T("STL"),_T("norm"),                               _T("complex"));
+  AddBinding(_T("STL"),_T("polar"),                              _T("complex"));
+  AddBinding(_T("STL"),_T("real"),                               _T("complex"));
+  AddBinding(_T("STL"),_T("deque"),                              _T("deque"));
+  AddBinding(_T("STL"),_T("bad_exception"),                      _T("exception"));
+  AddBinding(_T("STL"),_T("exception"),                          _T("exception"));
+  AddBinding(_T("STL"),_T("set_terminate"),                      _T("exception"));
+  AddBinding(_T("STL"),_T("set_unexpected"),                     _T("exception"));
+  AddBinding(_T("STL"),_T("terminate"),                          _T("exception"));
+  AddBinding(_T("STL"),_T("terminate_handler"),                  _T("exception"));
+  AddBinding(_T("STL"),_T("uncaught_exception"),                 _T("exception"));
+  AddBinding(_T("STL"),_T("unexpected"),                         _T("exception"));
+  AddBinding(_T("STL"),_T("unexpected_handler"),                 _T("exception"));
+  AddBinding(_T("STL"),_T("basic_filebuf"),                      _T("fstream"));
+  AddBinding(_T("STL"),_T("basic_fstream"),                      _T("fstream"));
+  AddBinding(_T("STL"),_T("basic_ifstream"),                     _T("fstream"));
+  AddBinding(_T("STL"),_T("basic_ofstream"),                     _T("fstream"));
+  AddBinding(_T("STL"),_T("filebuf"),                            _T("fstream"));
+  AddBinding(_T("STL"),_T("fstream"),                            _T("fstream"));
+  AddBinding(_T("STL"),_T("ifstream"),                           _T("fstream"));
+  AddBinding(_T("STL"),_T("ofstream"),                           _T("fstream"));
+  AddBinding(_T("STL"),_T("wfilebuf"),                           _T("fstream"));
+  AddBinding(_T("STL"),_T("wfstream"),                           _T("fstream"));
+  AddBinding(_T("STL"),_T("wifstream"),                          _T("fstream"));
+  AddBinding(_T("STL"),_T("wofstream"),                          _T("fstream"));
+  AddBinding(_T("STL"),_T("binary_function"),                    _T("functional"));
+  AddBinding(_T("STL"),_T("binary_negate"),                      _T("functional"));
+  AddBinding(_T("STL"),_T("bind1st"),                            _T("functional"));
+  AddBinding(_T("STL"),_T("bind2nd"),                            _T("functional"));
+  AddBinding(_T("STL"),_T("binder1st"),                          _T("functional"));
+  AddBinding(_T("STL"),_T("binder2nd"),                          _T("functional"));
+  AddBinding(_T("STL"),_T("const_mem_fun_ref_t"),                _T("functional"));
+  AddBinding(_T("STL"),_T("const_mem_fun_t"),                    _T("functional"));
+  AddBinding(_T("STL"),_T("const_mem_fun1_ref_t"),               _T("functional"));
+  AddBinding(_T("STL"),_T("const_mem_fun1_t"),                   _T("functional"));
+  AddBinding(_T("STL"),_T("divides"),                            _T("functional"));
+  AddBinding(_T("STL"),_T("equal_to"),                           _T("functional"));
+  AddBinding(_T("STL"),_T("greater"),                            _T("functional"));
+  AddBinding(_T("STL"),_T("greater_equal"),                      _T("functional"));
+  AddBinding(_T("STL"),_T("less"),                               _T("functional"));
+  AddBinding(_T("STL"),_T("less_equal"),                         _T("functional"));
+  AddBinding(_T("STL"),_T("logical_and"),                        _T("functional"));
+  AddBinding(_T("STL"),_T("logical_not"),                        _T("functional"));
+  AddBinding(_T("STL"),_T("logical_or"),                         _T("functional"));
+  AddBinding(_T("STL"),_T("mem_fun"),                            _T("functional"));
+  AddBinding(_T("STL"),_T("mem_fun_ref"),                        _T("functional"));
+  AddBinding(_T("STL"),_T("mem_fun_ref_t"),                      _T("functional"));
+  AddBinding(_T("STL"),_T("mem_fun_t"),                          _T("functional"));
+  AddBinding(_T("STL"),_T("mem_fun1_ref_t"),                     _T("functional"));
+  AddBinding(_T("STL"),_T("mem_fun1_t"),                         _T("functional"));
+  AddBinding(_T("STL"),_T("minus"),                              _T("functional"));
+  AddBinding(_T("STL"),_T("modulus"),                            _T("functional"));
+  AddBinding(_T("STL"),_T("multiplies"),                         _T("functional"));
+  AddBinding(_T("STL"),_T("negate"),                             _T("functional"));
+  AddBinding(_T("STL"),_T("not_equal_to"),                       _T("functional"));
+  AddBinding(_T("STL"),_T("not1"),                               _T("functional"));
+  AddBinding(_T("STL"),_T("not2"),                               _T("functional"));
+  AddBinding(_T("STL"),_T("plus"),                               _T("functional"));
+  AddBinding(_T("STL"),_T("pointer_to_binary_function"),         _T("functional"));
+  AddBinding(_T("STL"),_T("pointer_to_unary_function"),          _T("functional"));
+  AddBinding(_T("STL"),_T("ptr_fun"),                            _T("functional"));
+  AddBinding(_T("STL"),_T("unary_function"),                     _T("functional"));
+  AddBinding(_T("STL"),_T("unary_negate"),                       _T("functional"));
+  AddBinding(_T("STL"),_T("hash_compare"),                       _T("hash_map"));
+  AddBinding(_T("STL"),_T("hash_map"),                           _T("hash_map"));
+  AddBinding(_T("STL"),_T("hash_multimap"),                      _T("hash_map"));
+  AddBinding(_T("STL"),_T("value_compare"),                      _T("hash_map"));
+  AddBinding(_T("STL"),_T("hash_multiset"),                      _T("hash_set"));
+  AddBinding(_T("STL"),_T("hash_set"),                           _T("hash_set"));
+  AddBinding(_T("STL"),_T("get_money"),                          _T("iomanip"));
+  AddBinding(_T("STL"),_T("get_time"),                           _T("iomanip"));
+  AddBinding(_T("STL"),_T("put_money"),                          _T("iomanip"));
+  AddBinding(_T("STL"),_T("put_time"),                           _T("iomanip"));
+  AddBinding(_T("STL"),_T("resetiosflags"),                      _T("iomanip"));
+  AddBinding(_T("STL"),_T("setbase"),                            _T("iomanip"));
+  AddBinding(_T("STL"),_T("setfill"),                            _T("iomanip"));
+  AddBinding(_T("STL"),_T("setiosflags"),                        _T("iomanip"));
+  AddBinding(_T("STL"),_T("setprecision"),                       _T("iomanip"));
+  AddBinding(_T("STL"),_T("setw"),                               _T("iomanip"));
+  AddBinding(_T("STL"),_T("cerr"),                               _T("iostream"));
+  AddBinding(_T("STL"),_T("cin"),                                _T("iostream"));
+  AddBinding(_T("STL"),_T("clog"),                               _T("iostream"));
+  AddBinding(_T("STL"),_T("cout"),                               _T("iostream"));
+  AddBinding(_T("STL"),_T("endl"),                               _T("iostream"));
+  AddBinding(_T("STL"),_T("istream"),                            _T("iostream"));
+  AddBinding(_T("STL"),_T("ostream"),                            _T("iostream"));
+  AddBinding(_T("STL"),_T("wcerr"),                              _T("iostream"));
+  AddBinding(_T("STL"),_T("wcin"),                               _T("iostream"));
+  AddBinding(_T("STL"),_T("wclog"),                              _T("iostream"));
+  AddBinding(_T("STL"),_T("wcout"),                              _T("iostream"));
+  AddBinding(_T("STL"),_T("advance"),                            _T("iterator"));
+  AddBinding(_T("STL"),_T("back_inserter"),                      _T("iterator"));
+  AddBinding(_T("STL"),_T("distance"),                           _T("iterator"));
+  AddBinding(_T("STL"),_T("front_inserter"),                     _T("iterator"));
+  AddBinding(_T("STL"),_T("inserter"),                           _T("iterator"));
+  AddBinding(_T("STL"),_T("make_move_iterator"),                 _T("iterator"));
+  AddBinding(_T("STL"),_T("back_insert_iterator"),               _T("iterator"));
+  AddBinding(_T("STL"),_T("bidirectional_iterator_tag"),         _T("iterator"));
+  AddBinding(_T("STL"),_T("checked_array_iterator"),             _T("iterator"));
+  AddBinding(_T("STL"),_T("forward_iterator_tag"),               _T("iterator"));
+  AddBinding(_T("STL"),_T("front_insert_iterator"),              _T("iterator"));
+  AddBinding(_T("STL"),_T("input_iterator_tag"),                 _T("iterator"));
+  AddBinding(_T("STL"),_T("insert_iterator"),                    _T("iterator"));
+  AddBinding(_T("STL"),_T("istream_iterator"),                   _T("iterator"));
+  AddBinding(_T("STL"),_T("istreambuf_iterator"),                _T("iterator"));
+  AddBinding(_T("STL"),_T("iterator"),                           _T("iterator"));
+  AddBinding(_T("STL"),_T("iterator_traits"),                    _T("iterator"));
+  AddBinding(_T("STL"),_T("move_iterator"),                      _T("iterator"));
+  AddBinding(_T("STL"),_T("ostream_iterator"),                   _T("iterator"));
+  AddBinding(_T("STL"),_T("ostreambuf_iterator"),                _T("iterator"));
+  AddBinding(_T("STL"),_T("output_iterator_tag"),                _T("iterator"));
+  AddBinding(_T("STL"),_T("random_access_iterator_tag"),         _T("iterator"));
+  AddBinding(_T("STL"),_T("reverse_iterator"),                   _T("iterator"));
+  AddBinding(_T("STL"),_T("float_denorm_style"),                 _T("limits"));
+  AddBinding(_T("STL"),_T("float_round_style"),                  _T("limits"));
+  AddBinding(_T("STL"),_T("numeric_limits"),                     _T("limits"));
+  AddBinding(_T("STL"),_T("list"),                               _T("list"));
+  AddBinding(_T("STL"),_T("codecvt"),                            _T("locale"));
+  AddBinding(_T("STL"),_T("codecvt_base"),                       _T("locale"));
+  AddBinding(_T("STL"),_T("codecvt_byname"),                     _T("locale"));
+  AddBinding(_T("STL"),_T("collate"),                            _T("locale"));
+  AddBinding(_T("STL"),_T("collate_byname"),                     _T("locale"));
+  AddBinding(_T("STL"),_T("ctype"),                              _T("locale"));
+  AddBinding(_T("STL"),_T("ctype_base"),                         _T("locale"));
+  AddBinding(_T("STL"),_T("ctype_byname"),                       _T("locale"));
+  AddBinding(_T("STL"),_T("locale"),                             _T("locale"));
+  AddBinding(_T("STL"),_T("messages"),                           _T("locale"));
+  AddBinding(_T("STL"),_T("messages_base"),                      _T("locale"));
+  AddBinding(_T("STL"),_T("messages_byname"),                    _T("locale"));
+  AddBinding(_T("STL"),_T("money_base"),                         _T("locale"));
+  AddBinding(_T("STL"),_T("money_get"),                          _T("locale"));
+  AddBinding(_T("STL"),_T("money_put"),                          _T("locale"));
+  AddBinding(_T("STL"),_T("moneypunct"),                         _T("locale"));
+  AddBinding(_T("STL"),_T("moneypunct_byname"),                  _T("locale"));
+  AddBinding(_T("STL"),_T("num_get"),                            _T("locale"));
+  AddBinding(_T("STL"),_T("num_put"),                            _T("locale"));
+  AddBinding(_T("STL"),_T("numpunct"),                           _T("locale"));
+  AddBinding(_T("STL"),_T("numpunct_byname"),                    _T("locale"));
+  AddBinding(_T("STL"),_T("time_base"),                          _T("locale"));
+  AddBinding(_T("STL"),_T("time_get"),                           _T("locale"));
+  AddBinding(_T("STL"),_T("time_put_byname"),                    _T("locale"));
+  AddBinding(_T("STL"),_T("map"),                                _T("map"));
+  AddBinding(_T("STL"),_T("multimap"),                           _T("map"));
+  AddBinding(_T("STL"),_T("value_compare"),                      _T("map"));
+  AddBinding(_T("STL"),_T("allocator"),                          _T("memory"));
+  AddBinding(_T("STL"),_T("auto_ptr"),                           _T("memory"));
+  AddBinding(_T("STL"),_T("checked_uninitialized_fill_n"),       _T("memory"));
+  AddBinding(_T("STL"),_T("get_temporary_buffer"),               _T("memory"));
+  AddBinding(_T("STL"),_T("raw_storage_iterator "),              _T("memory"));
+  AddBinding(_T("STL"),_T("return_temporary_buffer"),            _T("memory"));
+  AddBinding(_T("STL"),_T("unchecked_uninitialized_fill_n"),     _T("memory"));
+  AddBinding(_T("STL"),_T("uninitialized_copy"),                 _T("memory"));
+  AddBinding(_T("STL"),_T("uninitialized_fill"),                 _T("memory"));
+  AddBinding(_T("STL"),_T("uninitialized_fill_n"),               _T("memory"));
+  AddBinding(_T("STL"),_T("accumulate"),                         _T("numeric"));
+  AddBinding(_T("STL"),_T("adjacent_difference"),                _T("numeric"));
+  AddBinding(_T("STL"),_T("checked_adjacent_difference"),        _T("numeric"));
+  AddBinding(_T("STL"),_T("checked_partial_sum"),                _T("numeric"));
+  AddBinding(_T("STL"),_T("inner_product"),                      _T("numeric"));
+  AddBinding(_T("STL"),_T("partial_sum"),                        _T("numeric"));
+  AddBinding(_T("STL"),_T("unchecked_adjacent_difference"),      _T("numeric"));
+  AddBinding(_T("STL"),_T("unchecked_partial_sum"),              _T("numeric"));
+  AddBinding(_T("STL"),_T("priority_queue "),                    _T("queue"));
+  AddBinding(_T("STL"),_T("queue"),                              _T("queue"));
+  AddBinding(_T("STL"),_T("multiset"),                           _T("set"));
+  AddBinding(_T("STL"),_T("set"),                                _T("set"));
+  AddBinding(_T("STL"),_T("basic_istringstream"),                _T("sstream"));
+  AddBinding(_T("STL"),_T("basic_ostringstream"),                _T("sstream"));
+  AddBinding(_T("STL"),_T("basic_stringbuf"),                    _T("sstream"));
+  AddBinding(_T("STL"),_T("basic_stringstream"),                 _T("sstream"));
+  AddBinding(_T("STL"),_T("istringstream"),                      _T("sstream"));
+  AddBinding(_T("STL"),_T("ostringstream"),                      _T("sstream"));
+  AddBinding(_T("STL"),_T("stringbuf"),                          _T("sstream"));
+  AddBinding(_T("STL"),_T("stringstream"),                       _T("sstream"));
+  AddBinding(_T("STL"),_T("wistringstream"),                     _T("sstream"));
+  AddBinding(_T("STL"),_T("wostringstream"),                     _T("sstream"));
+  AddBinding(_T("STL"),_T("wstringbuf"),                         _T("sstream"));
+  AddBinding(_T("STL"),_T("wstringstream"),                      _T("sstream"));
+  AddBinding(_T("STL"),_T("stack"),                              _T("stack"));
+  AddBinding(_T("STL"),_T("domain_error"),                       _T("stdexcept"));
+  AddBinding(_T("STL"),_T("invalid_argument "),                  _T("stdexcept"));
+  AddBinding(_T("STL"),_T("length_error"),                       _T("stdexcept"));
+  AddBinding(_T("STL"),_T("logic_error"),                        _T("stdexcept"));
+  AddBinding(_T("STL"),_T("out_of_range"),                       _T("stdexcept"));
+  AddBinding(_T("STL"),_T("overflow_error"),                     _T("stdexcept"));
+  AddBinding(_T("STL"),_T("range_error"),                        _T("stdexcept"));
+  AddBinding(_T("STL"),_T("runtime_error "),                     _T("stdexcept"));
+  AddBinding(_T("STL"),_T("underflow_error "),                   _T("stdexcept"));
+  AddBinding(_T("STL"),_T("basic_streambuf"),                    _T("streambuf"));
+  AddBinding(_T("STL"),_T("streambuf"),                          _T("streambuf"));
+  AddBinding(_T("STL"),_T("wstreambuf"),                         _T("streambuf"));
+  AddBinding(_T("STL"),_T("basic_string"),                       _T("string"));
+  AddBinding(_T("STL"),_T("char_traits"),                        _T("string"));
+  AddBinding(_T("STL"),_T("string"),                             _T("string"));
+  AddBinding(_T("STL"),_T("wstring"),                            _T("string"));
+  AddBinding(_T("STL"),_T("istrstream"),                         _T("strstream"));
+  AddBinding(_T("STL"),_T("ostrstream"),                         _T("strstream"));
+  AddBinding(_T("STL"),_T("strstream"),                          _T("strstream"));
+  AddBinding(_T("STL"),_T("strstreambuf"),                       _T("strstream"));
+  AddBinding(_T("STL"),_T("pair"),                               _T("utility"));
+  AddBinding(_T("STL"),_T("make_pair"),                          _T("utility"));
+  AddBinding(_T("STL"),_T("gslice"),                             _T("valarray"));
+  AddBinding(_T("STL"),_T("gslice_array"),                       _T("valarray"));
+  AddBinding(_T("STL"),_T("indirect_array"),                     _T("valarray"));
+  AddBinding(_T("STL"),_T("mask_array"),                         _T("valarray"));
+  AddBinding(_T("STL"),_T("slice"),                              _T("valarray"));
+  AddBinding(_T("STL"),_T("slice_array"),                        _T("valarray"));
+  AddBinding(_T("STL"),_T("valarray"),                           _T("valarray"));
+  AddBinding(_T("STL"),_T("vector"),                             _T("vector"));
+}// SetDefaultsSTL
+
+void Bindings::SetDefaultsCLibrary()
+{
+  AddBinding(_T("C_Library"),_T("assert"),     _T("cassert"));
+  AddBinding(_T("C_Library"),_T("isalnum"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("isalpha"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("iscntrl"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("isdigit"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("isgraph"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("islower"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("isprint"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("ispunct"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("isspace"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("isupper"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("isxdigit"),   _T("cctype"));
+  AddBinding(_T("C_Library"),_T("tolower"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("toupper"),    _T("cctype"));
+  AddBinding(_T("C_Library"),_T("setlocale"),  _T("clocale"));
+  AddBinding(_T("C_Library"),_T("localeconv"), _T("clocale"));
+  AddBinding(_T("C_Library"),_T("fclose"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fopen"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fflush"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("freopen"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("setbuf"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("setvbuf"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fprintf"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fscan"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("printf"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("scanf"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("sprintf"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("sscanf"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("vfprintf"),   _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("vprintf"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("vsprintf"),   _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fgetc"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fgets"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fputc"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fputs"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("getc"),       _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("getchar"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("gets"),       _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("putc"),       _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("putchar"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("puts"),       _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("ungetc"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fread"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fwrite"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fgetpos"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fseek"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("fsetpos"),    _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("ftell"),      _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("rewind"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("clearerr"),   _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("feof"),       _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("ferror"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("perrer"),     _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("FILE"),       _T("cstdio"));
+  AddBinding(_T("C_Library"),_T("abort"),      _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("abs"),        _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("atexit"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("atof"),       _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("atoi"),       _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("atol"),       _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("bsearch"),    _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("calloc"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("div"),        _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("exit"),       _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("free"),       _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("getenv"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("labs"),       _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("ldiv"),       _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("malloc"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("mblen"),      _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("mbstowcs"),   _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("mbtowc"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("qsort"),      _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("rand"),       _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("realloc"),    _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("srand"),      _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("strtod"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("strtol"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("strtoul"),    _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("system"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("wcstombs"),   _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("wctomb"),     _T("cstdlib"));
+  AddBinding(_T("C_Library"),_T("memchr"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("memcmp"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("memcpy"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("memmove"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("memset"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strcat"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strchr"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strcmp"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strcoll"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strcpy"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strcspn"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strerror"),   _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strlen"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strncat"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strncmp"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strncpy"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strpbrk"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strrchr"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strspn"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strstr"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strtok"),     _T("cstring"));
+  AddBinding(_T("C_Library"),_T("strxfrm"),    _T("cstring"));
+  AddBinding(_T("C_Library"),_T("asctime"),    _T("ctime"));
+  AddBinding(_T("C_Library"),_T("clock"),      _T("ctime"));
+  AddBinding(_T("C_Library"),_T("ctime"),      _T("ctime"));
+  AddBinding(_T("C_Library"),_T("difftime"),   _T("ctime"));
+  AddBinding(_T("C_Library"),_T("gmtime"),     _T("ctime"));
+  AddBinding(_T("C_Library"),_T("localtime"),  _T("ctime"));
+  AddBinding(_T("C_Library"),_T("mktime"),     _T("ctime"));
+  AddBinding(_T("C_Library"),_T("strftime"),   _T("ctime"));
+  AddBinding(_T("C_Library"),_T("time"),       _T("ctime"));
+}// SetDefaultsCLibrary